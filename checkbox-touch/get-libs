#!/usr/bin/env python3
# this file is part of checkbox.
#
# copyright 2014 canonical ltd.
# written by:
#   maciej kisielewski <maciej.kisielewski@canonical.com>
#
# checkbox is free software: you can redistribute it and/or modify
# it under the terms of the gnu general public license version 3,
# as published by the free software foundation.
#
# checkbox is distributed in the hope that it will be useful,
# but without any warranty; without even the implied warranty of
# merchantability or fitness for a particular purpose.  see the
# gnu general public license for more details.
#
# you should have received a copy of the gnu general public license
# along with checkbox.  if not, see <http://www.gnu.org/licenses/>.
"""
Download and extract .deb packages necessary to run checkbox-touch
Extraction is done to specific directories as required by click package
"""

import apt
import apt_pkg
import os
import shutil
import subprocess
import tarfile
import tempfile
import urllib.request
from distutils.dir_util import copy_tree

# arch_list contains list of architectures for which the packages should be
# downloaded
arch_list = ['i386', 'amd64', 'armhf']
# multiarch_list contains full architecture name as used in the directories
# in contents of click package
multiarch_list = ["i386-linux-gnu", "x86_64-linux-gnu", "arm-linux-gnueabihf"]


def prepare_uris():
    """
    prepare_uris function builds caches for architectures defined in arch_list
    and builds a dictionary of URLs indexed by (package_name, arch) tuple.
    It returns that dictionary.
    """
    packages = ['libpython3.4', 'pyotherside', 'python3-lxml']
    # uris will serve as a database of uris from which to download packages
    uris = dict()
    repos = {
        'armhf': 'http://ports.ubuntu.com/ubuntu-ports',
        'i386': 'http://archive.ubuntu.com/ubuntu',
        'amd64': 'http://archive.ubuntu.com/ubuntu'
        }
    for arch in arch_list:
        print('Getting information about packages for {0} arch.'.format(arch))
        # prepare sources.list for apt
        with tempfile.TemporaryDirectory() as tmp:
            new_etc_apt = os.path.join(tmp, 'etc', 'apt')
            os.makedirs(new_etc_apt)
            # copy over trusted.gpg
            shutil.copyfile('/etc/apt/trusted.gpg',
                            os.path.join(new_etc_apt, 'trusted.gpg'))
            sources_list = open(os.path.join(new_etc_apt, 'sources.list'), "w")
            sources_list.write(
                "deb [arch={arch}] {repo} utopic main restricted universe"
                .format(arch=arch, repo=repos[arch]))
            sources_list.close()
            apt_pkg.config["Apt::Architecture"] = arch
            cache = apt.Cache(rootdir=tmp)
            cache.update()
            cache.open(None)
            for pkg in packages:
                if pkg not in cache or len(cache[pkg].versions) < 1:
                    # package not found
                    raise Exception('Package {0} not found for arch {1}'
                                    .format(pkg, arch))
                # use first uri available
                uris[pkg, arch] = cache[pkg].versions[0].uri
    # return filled dictionary
    return uris


def get_package_from_url_and_extract(url, target_dir):
    filename = os.path.join(target_dir, url.split('/')[-1])
    print('retrieving {0}'.format(url))
    urllib.request.urlretrieve(url, filename)
    subprocess.check_call(["dpkg", "-x", filename, target_dir])


def get_plainbox(version='0.10'):
    # plaibox_pypi contains URL from which to download plainbox
    plainbox_pypi = ('https://pypi.python.org/packages/source'
                     '/p/plainbox/plainbox-{}.tar.gz'.format(version))
    with tempfile.TemporaryDirectory() as tmp:
        filename = os.path.join(tmp, plainbox_pypi.split('/')[-1])
        print('retrieving {0}'.format(plainbox_pypi))
        urllib.request.urlretrieve(plainbox_pypi, filename)
        tarball = tarfile.open(filename)
        members = [member for member in tarball.getmembers()
                   if member.name.startswith(
                       "plainbox-{}/plainbox/".format(version))]
        tarball.extractall(tmp, members=members)
        copy_tree(
            os.path.join(tmp, "plainbox-{}".format(version), "plainbox"),
            os.path.join('lib', 'py', 'plainbox'),
            preserve_symlinks=1)


def main():
    get_plainbox()
    uris = prepare_uris()
    # libs_urls contains list of .deb packages that will be downloaded and
    # extracted. After extraction contents of ./usr/lib are copied to ./lib
    libs_urls = [uris['libpython3.4', arch] for arch in arch_list]
    for lib in libs_urls:
        with tempfile.TemporaryDirectory() as tmp:
            get_package_from_url_and_extract(lib, tmp)
            # TODO: remove unwanted files from the extracted tree (e.g. *.h)
            copy_tree(
                os.path.join(tmp, 'usr', 'lib'), 'lib',
                preserve_symlinks=1)
    # python3_libs_urls contains list of .deb packages that will be downloaded
    # and extracted. After extraction contents of
    # ./usr/lib/python3/dist-packages are copied to ./lib/py.
    python3_libs_urls = [uris['python3-lxml', arch] for arch in arch_list]
    for pylib in python3_libs_urls:
        with tempfile.TemporaryDirectory() as tmp:
            get_package_from_url_and_extract(pylib, tmp)
            copy_tree(
                os.path.join(tmp, 'usr', 'lib', 'python3', 'dist-packages'),
                os.path.join('lib', 'py'),
                preserve_symlinks=1)
    # qml_plugins_url contains list of .deb packages that will be downloaded
    # and extracted. After extraction contents of
    # ./usr/lib/{architecture}/qt5/qmlare copied to ./lib/{architecture}.
    # {architecture} may be one of multiarch_list
    qml_plugins_urls = [uris['pyotherside', arch] for arch in arch_list]
    for qml_plugin in qml_plugins_urls:
        with tempfile.TemporaryDirectory() as tmp:
            get_package_from_url_and_extract(qml_plugin, tmp)
            for arch in multiarch_list:
                src = os.path.join(tmp, 'usr', 'lib', arch, 'qt5', 'qml')
                dest = os.path.join('lib', arch)
                if os.path.exists(src) and os.path.isdir(src):
                    copy_tree(src, dest, preserve_symlinks=1)
    # Copy QChart.js from the git checkbox repo into our components/vendor
    # folder
    git_url = 'https://github.com/checkbox/qchart.js/archive/' \
              '1.0-1ubuntu1.tar.gz'
    target_dir = 'components/vendor/qchart_js/'
    os.makedirs('components/vendor/qchart_js/', exist_ok=True)
    subprocess.check_call('wget {} -q -O - | tar -xz --strip=1 -C {}'.format(
        git_url, target_dir), shell=True)
    # Remove the python3.4 directory
    # currently it only holds a few config-directories with symlinks
    # and those are not used by anything from this location
    shutil.rmtree('lib/python3.4')


if __name__ == "__main__":
    main()
