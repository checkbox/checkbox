#!/usr/bin/env python3
# This file is part of Checkbox.
#
# Copyright 2015 Canonical Ltd.
# Written by:
#   Zygmunt Krynicki <zygmunt.krynicki@canonical.com>
#
# Checkbox is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3,
# as published by the Free Software Foundation.
#
# Checkbox is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Checkbox.  If not, see <http://www.gnu.org/licenses/>.

"""Canonical Hardware Collection Script."""

import gettext
import logging
import re
import time

# TODO: use public APIs here
from plainbox.impl.color import CanonicalColors
from plainbox.impl.ingredients import CanonicalCommand

_ = gettext.gettext

_logger = logging.getLogger("canonical-hw-collection")


class SecureID(str):

    """A Canonical-specific identifier of a particular device."""

    SECURE_ID_PATTERN = r"^[a-zA-Z0-9]{15}$|^[a-zA-Z0-9]{18}$"

    def __new__(cls, value):
        if not re.match(cls.SECURE_ID_PATTERN, value):
            raise ValueError(
                _("secure_id must be 15 or 18-character alphanumeric string"))
        return super().__new__(cls, value)


class canonical_hw_collection(CanonicalCommand):

    """
    Tool for collecting hardware information and sending it to Canonical.

    This tool collects various information about the hardware it is running on
    and sends it to a server operated by Canonical (Certification website).

    Note that unless you are a Canonical employee, or you've been asked to use
    this tool by a Canonical employee, you will not have much use of the tool,
    as none of the data is publicly available.
    """

    app_id = 'canonical-hw-collection'
    version = '1.2'

    def register_arguments(self, parser):
        """Method called to register command line arguments."""
        parser.add_argument(
            'secure_id', metavar=_("SECURE-ID"),
            help=_("Canonical hardware identifier"), type=SecureID)
        parser.add_argument(
            '--timeout', metavar=_("SECONDS"), type=int, default=5,
            help=_("Delay before starting automated hardware collection"))
        parser.add_argument(
            '--staging', action='store_true', default=False,
            help=_("Send the data to non-production test server"))

    def invoked(self, ctx):
        """Method called when the command is invoked."""
        self.transport = self._create_transport(
            ctx.sa, ctx.args.secure_id, ctx.args.staging)
        self.ctx = ctx
        ctx.sa.provider_selected.connect(self._on_provider_selected)
        ctx.sa.session_available.connect(self._on_session_available)
        try:
            self._show_intro(ctx.rc, ctx.args.timeout)
            self._collect_info(ctx.rc, ctx.sa)
        except KeyboardInterrupt:
            print()
            return self._abort_collect(ctx.rc)
        try:
            self._send_results(
                ctx.rc, ctx.sa, ctx.args.secure_id, ctx.args.staging)
        except KeyboardInterrupt:
            print()
            return self._abort_send(ctx.rc)

    def _on_provider_selected(self, provider, auto):
        self.ctx.rc.reset()
        self.ctx.rc.bg = CanonicalColors.white
        self.ctx.rc.fg = CanonicalColors.text_grey
        self.ctx.rc.padding = (0, 0, 0, 4)
        self.ctx.rc.para(_(
            "Using provider: {0}"
        ).format(provider.name))

    def _on_session_available(self, session_id):
        self.ctx.rc.reset()
        self.ctx.rc.bg = CanonicalColors.white
        self.ctx.rc.fg = CanonicalColors.text_grey
        self.ctx.rc.bold = 1
        self.ctx.rc.padding = (1, 4, 0, 4)
        self.ctx.rc.para(_(
            "Identifier of the testing session: {0}"
        ).format(session_id))

    def _send_results(self, rc, sa, secure_id, staging):
        rc.reset()
        rc.fg = CanonicalColors.white
        rc.bg = CanonicalColors.dark_aubergine
        rc.padding = (1, 1, 0, 1)
        rc.para(_("Sending hardware report to Canonical Certification"))
        rc.para(_("Server URL is: {0}").format(self.transport.url))
        result = sa.export_to_transport(
            "2013.com.canonical.plainbox::hexr", self.transport)
        if 'url' in result:
            rc.para(result['url'])
        rc.padding = (0, 1, 1, 1)
        rc.bg = CanonicalColors.ubuntu_orange
        rc.fg = CanonicalColors.white
        rc.para("All done, thank you!")

    def _create_transport(self, sa, secure_id, staging):
        return sa.get_canonical_certification_transport(
            secure_id, staging=staging)

    def _show_intro(self, rc, timeout):
        rc.fg = CanonicalColors.white
        rc.bg = CanonicalColors.mid_aubergine
        rc.padding = (1, 1, 0, 1)
        rc.align = 'right'
        rc.bold = 1
        rc.para(_("Canonical Hardware Collection Tool"))
        rc.bold = 0
        rc.padding = (0, 1, 1, 1)
        rc.fg = CanonicalColors.ubuntu_orange
        rc.para(_("version {}").format(self.get_cmd_version()))
        rc.bg = CanonicalColors.dark_aubergine
        rc.padding = (1, 4, 1, 4)
        rc.fg = CanonicalColors.white
        rc.align = 'left'
        rc.para(_(
            "This tool introspects the system it is started on and sends "
            "a composite report to a service operated by Canonical Ltd."))
        rc.padding = (0, 4, 1, 4)
        rc.para(_(
            "If this is not what you intended then exit this program now by"
            " pressing CTRL-C."))
        rc.fg = CanonicalColors.warm_grey
        rc.bold = 1
        rc.para(gettext.ngettext(
            "The process will commence in {0} second.",
            "The process will commence in {0} seconds.", timeout
        ).format(timeout))
        time.sleep(timeout)

    def _collect_info(self, rc, sa):
        rc.reset()
        rc.bg = CanonicalColors.white
        rc.fg = CanonicalColors.text_grey
        rc.bold = 1
        rc.padding = (1, 4, 1, 4)
        rc.para(_("Preparing..."))
        rc.padding = (0, 4, 1, 4)
        # TODO: load the new standalone provider instead
        sa.select_providers(
            "plainbox-provider-checkbox",
            "plainbox-provider-resource-generic")
        sa.start_new_session(_("Hardware Collection Session"))
        # TODO: use the new standalone test plan instead
        sa.select_test_plan(
            "2013.com.canonical.certification::hwsubmit")
        sa.bootstrap()
        rc.para(_("Collecting Hardware Information"))
        rc.bold = 0
        rc.padding = (0, 2, 0, 2)
        for job_id in sa.get_static_todo_list():
            job = sa.get_job(job_id)
            rc.para("- {0}".format(job.tr_summary()))
            builder = sa.run_job(job_id, 'silent', native=False)
            result = builder.get_result()
            sa.use_job_result(job_id, result)

    def _abort_collect(self, rc):
        rc.reset()
        rc.fg = CanonicalColors.cool_grey
        rc.bg = CanonicalColors.white
        rc.padding = (1, 1, 1, 1)
        rc.para(_("Hardware collection was interrupted"))
        rc.bold = 1
        rc.para(_("No data was sent to any server"))
        return 1

    def _abort_send(self, rc):
        rc.reset()
        rc.fg = CanonicalColors.cool_grey
        rc.bg = CanonicalColors.white
        rc.padding = (1, 1, 1, 1)
        rc.para(_("Hardware collection was interrupted"))
        rc.bold = 1
        rc.para(_("Some data may have been sent to the server"))
        rc.para(_("This will be retained by Canonical but unless the"
                  " submission was complete it will not be processed."))
        return 1


if __name__ == '__main__':
    canonical_hw_collection().main()
