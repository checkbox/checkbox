Prerequisites:

    sudo apt-get install autoconf lptools python-bs4 twine

Note: twine is available in the utopic and trusty backports repository.

Always maintain 3 milestones ahead

    Use the lp-create-milestone script like this:

    ./lp-create-milestone plainbox -n 0.57 -d 2015-11-24

Check bugs in checkbox-project to see if they can be included in the release
to come. Some of them could be "In Progress" but with the fix already merged
in trunk. Update their statuses and milestones.

Review the current milestones content and postpone to the next one the bugs
not "Fix Committed".

Cutting the release

Preparation:

Create a dedicated directory that you will keep during all the release (1 week).

    mkdir ~/checkbox_release

Copy all the delivery support scripts to the release directory:

    bzr export /tmp/delivery_tools lp:checkbox
    cp /tmp/delivery_tools/support/release/* ~/checkbox_release

Move to the release directory

    cd ~/checkbox_release

Cut the release, change all package versions to RC and create/apply bzr tags
for the release candidate.

    ./release_checkbox.py testing

Follow the on-screen instructions given when the scripts ends as nothing will be
pushed to lp automatically:

    1. Push all the branches (trunk and ppa-packaging*) to their release branches
       Copy and launch the proposed commands once you're sure that the branches
       are ok, check versions and tags (for both trunk and packaging branches)
    2. Update the bzr build recipes and request builds in the testing ppa (link)
       Give lp a minute or two before updating the recipes. Again copy and
       execute the proposed commands.

Special case: Canonical certification provider for Plainbox

The `plainbox-provider-canonical-certification` project has to be handled
separately, as it is in a separate Git repository.

1. Clone the Git repository:

    git clone git+ssh://<lp-username>@git.launchpad.net/plainbox-provider-canonical-certification

By default, you will be working on the `master-client` branch. We will deal with
the `master-server` branch at a later stage.

2. Bump version in manage.py and commit.
3. Tag the version and push the changes:

    git tag -a plainbox-provider-certification-client-v0.21 -m 'Release plainbox-provider-certification-client v0.21' -s
    git push git+ssh://git.launchpad.net/plainbox-provider-canonical-certification master-client --tags
    git push git+ssh://git.launchpad.net/plainbox-provider-canonical-certification master-client

4. Prepare the upstream tarball and send it over to Launchpad:

    ./manage.py sdist
    cd dist/
    gpg --armor --sign --detach-sig certification-client-0.20.1.tar.gz
    lp-project-upload plainbox-provider-canonical-certification 0.20 certification-client-0.20.1.tar.gz

5. Copy the source tarball with a debian compliant name:

    cp certification-client-0.21.tar.gz ../../plainbox-provider-certification-client_0.21.orig.tar.gz

We'll now use git-dpm in the packaging repository to handle the Debian packages creation.

6. Clone the packaging client repository:

    git clone git+ssh://pierre-equoy@git.launchpad.net/~checkbox-dev/plainbox-provider-canonical-certification/+git/packaging-client

7. Do the git-dpm dance!

    cd packaging-client
    git-dpm import-new-upstream ../../plainbox-provider-certification-client_0.21.orig.tar.gz
    pristine-tar commit ../../plainbox-provider-certification-client_0.21.orig.tar.gz 7b3825dd8ec07b3fd8bc30d7747f1e66d4a12f40
    git-dpm prepare
    git-dpm dch -- -v 0.21-1 -D precise "new upstream version"
    git-dpm tag

8. Push the changes to the client packaging repository:

    git push git+ssh://<lp-username>@git.launchpad.net/~checkbox-dev/plainbox-provider-canonical-certification/+git/packaging-client --tags
    git push git+ssh://<lp-username>@git.launchpad.net/~checkbox-dev/plainbox-provider-canonical-certification/+git/packaging-client

9. Create a source package and upload it to the testing ppa:

    dpkg-buildpackage -S
    dput ppa:checkbox-dev/testing ../plainbox-provider-certification-client_0.21-1_source.changes

Now, repeat steps 2 to 9 for the `master-server` branch.
You will first have to create it locally:

    git checkout -b master-server remotes/origin/master-server

Once all of this is done, you should have the `plainbox-provider-certification-client`
and `plainbox-provider-certification-server` packages available for precise in
https://launchpad.net/~checkbox-dev/+archive/ubuntu/testing
You will have to copy these packages over to the other series (trusty, ...).

Special case: Cherry pick a bugfix from trunk after having cut the release:

    A second (or third...) release candidate has to be created for the
    impacted package:
    First, cherry pick the bug from trunk, e.g:

    cd ~/checkbox_release/trunk/
    bzr merge -r3105..3106 lp:checkbox
    cd  ~/checkbox_release

    Note: 3106 is the revision where the fix was committed
    (If cherry-picking single revisions, bzr merge -c REVNO also works)

    Create a second RC only for this package (and its packaging branch):

    ./releasectl plainbox-provider-resource-generic --origin=trunk --in-place --current-version=0.5c1 --bump-level=next-serial
    ./releasectl ppa-packaging-plainbox-provider-resource-generic --origin=ppa-packaging-plainbox-provider-resource-generic  --in-place --current-version=0.5c1 --bump-level=next-serial

    Push the branches to lp:

    bzr push -d trunk lp:~checkbox-dev/checkbox/release
    bzr push -d ppa-packaging-plainbox-provider-resource-generic lp:~checkbox-dev/checkbox/ppa-packaging-plainbox-provider-resource-generic-release

    Finally update the recipe(s) and build again the package(s)

TEST TEST TEST the release candidate(s)

Once testing is done, it's time to release the candidate packages to the stable ppa (link)

change all package versions to final, create/apply the corresponding bzr
tags and update the debian/changelog (closing the current entry and open the
next dev version)

Move to the release directory and launch the release script:

    cd ~/checkbox_release && ./release_checkbox.py stable

Follow the on-screen instructions given when the scripts ends as nothing will be
pushed to lp automatically:

    1. Push all the branches (trunk and ppa-packaging*) to their release branches
       Copy and launch the proposed commands once you're sure that the branches
       are ok, check versions and tags (for both trunk and packaging branches)
    2. Propose to merge the release branches into their non-release branch
       (e.g lp:checkbox/release has to be merged in trunk)
       Review the MR, approve and let tarmac do his job.
    3. Once all release branches are merged, update the bzr build recipes
       and request builds in the stable ppa (link).
       Again copy and execute the proposed commands.
    4. Release all the milestones and their related bugtasks, e.g:

       ./lp-release-milestone plainbox -m 0.57

    5. Upload the signed source tarballs to LP (using lp-project-upload).
    6. Upload the signed source tarballs to PyPI (using twine).

Special case: Canonical certification provider for Plainbox

You should have the `plainbox-provider-certification-client` and
`plainbox-provider-certification-server` packages available for the different
series in https://launchpad.net/~checkbox-dev/+archive/ubuntu/testing.
You will have to copy these packages over to the stable PPA.

Finally release the milestone with:

    ./lp-release-milestone plainbox-provider-canonical-certification -m 0.21

Release to debian
