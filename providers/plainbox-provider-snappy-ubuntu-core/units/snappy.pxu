id: snappy-ubuntu-core
_description:
 Test plan for certification of Snappy Ubuntu Core systems
_name: All Snappy Ubuntu Core Certification Tests
unit: test plan
include: snappy/.*
estimated_duration: 3600

unit: category
id: snappy
_name: Tests for Snappy Ubuntu Core devices

id: snappy/installation/live-system-dd
_purpose:
 This will test if image can be installed successfully by dd in a live system
_steps:
 1. Follow the installation guide in release note to install the image
_verification:
 Can boot into snappy system after installation
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/update
_purpose:
 Check ubuntu-core can be updated by snappy update
_steps:
 1. sudo mount -o remount,rw /
 2. sudo vi /etc/system-image/channel.ini
 3. Check version number in both build_number and version_detail, assume it's N
 4. Modify version number in both build_number and version_detail to N-1
 5. Reboot the system and log in
 6. sudo snappy update
 7. Reboot the system and log in
 8. snappy list -v
_verification:
 Check ubuntu-core version in the list
 1. System is currently boot the ubuntu-core version N (With a ""*"" at the end of line)
 2. Another ubuntu-core version is N-1
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/rollback
_purpose:
 Check ubuntu-core can be reverted by snappy rollback
_steps:
 1. Follow the steps in case plano/snappy/update to update ubuntu-core
 2. sudo snappy rollback
 3. Reboot the system and log in
 4. snappy list -v
_verification:
 Check ubuntu-core version in the list
 1. System is currently boot the ubuntu-core version N-1 (With a ""*"" at the end of line)
 2. Another ubuntu-core version is N
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/re-update
_purpose:
 Check ubuntu-core can be updated again by snappy update after rollback
_steps:
 1. Follow the steps in case plano/snappy/rollback to update ubuntu-core and rollback
 2. sudo snappy update
 3. Reboot the system and log in
 4. snappy list -v
_verification:
 Check ubuntu-core version in the list
 1. System is currently boot the ubuntu-core version N (With a ""*"" at the end of line)
 2. Another ubuntu-core version is N-1
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/snappy/fail-boot	
_purpose:
 Check system will rollback to original ubuntu-core if failed to boot the updated one
_steps:
 1. Follow the steps in case plano/snappy/update to update ubuntu-core
 2. Download following systemd unit and copy it to user home:
     http://people.canonical.com/~jhunt/systemd/conf/deadlock.service
 3. sudo mount -o remount,rw /writable/cache/system
 4. sudo cp deadlock.service /writable/cache/system/lib/systemd/system/
 5. sudo mkdir -p /writable/cache/system/lib/systemd/system/sysinit.target.requires/
 6. sudo chroot /writable/cache/system
 7. ln -s /lib/systemd/system/deadlock.service /lib/systemd/system/sysinit.target.requires/deadlock.service
 8. Reboot
 9. The boot will hang before reaching a getty login prompt due to deadlock.service
 10. Power-cycle the device
 11. snappy list -v
_verification:
 1. Check system can boot at step 10
 2. Check system is currently boot the ubuntu-core version N-1 (With a ""*"" at the end of line)
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/sshd
_purpose:
 Check if user can access the system through ssh from other machine
_steps:
 1. Execute following command on other machine in same network
     ssh [user id]@[ip address of the testing system]
 2. Enter password to login
_verification:
 Can log into system through ssh from other machine
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/webdm
_purpose:
 Check user can access webdm from other machine
_steps:
 1. Connect ethernet cable before boot
 2. Boot into system
 3. Browse following url with browser from other machine in same network
     http://[ip address of the testing system]:4200
_verification:
 Can access webdm interface
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/audio/external-microphone
_purpose:
 Check that an external microphone works
_steps:
 1. Plug headset to headset port
 2. Execute following command:
  alsamixer
 3. Use arrow key to adjust volume, m key to mute/unmute
 4. Make sure all channels are not muted and have an appropriate volume
 5. Press q to exit alsamixer
 6. Execute following command:
  arecord | aplay
 7. Speak in to microphone on headset
_verification:
 Verify that your voice is reproduced through the headphones clearly
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/audio/headphone
_purpose:
 Check headphones work
_steps:
 1. Plug headset to headset port
 2. Execute following command:
  alsamixer
 3. Use arrow key to adjust volume, m key to mute/unmute
 4. Make sure all channels are not muted and have an appropriate volume
 5. Press q to exit alsamixer
 6. Execute following command:
  arecord | aplay
 7. Speak in to microphone on headset
_verification:
 Verify that your voice is reproduced through the headphones clearly
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/bluetooth/hid
_purpose:
 Check bluetooth input device work
 Since there's only CLI with ubuntu-core, test keyboard only
_steps:
 1. Scan nearby devices:
     hcitool scan
 2. Pair a bluetooth input device
     bluez-simple-agent hci0 [MAC address of bluetooth input device]
 3. Set paired input device workable
     sudo bluez-test-input connect [MAC address of bluetooth input device]
_verification:
 Can input from input device
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/ethernet/ping
_purpose:
 Check ethernet works by pinging another machine
_steps:
 1. Make sure ethernet cable is connected and can access internet
 2. ping google.com
_verification:
 Can successfully get ping responses from google.com
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/led/power	
_purpose:
 Check power led is on when system is powered on
_steps:
 1. Check power led when system is powered on
_verification:
 Power led is on when system is powered on
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/led/power-blink-suspend	
_purpose:
 Check power led is blinking when system is in suspend
_steps:
 1. Suspend the system
 2. Check power led when system is in suspend
_verification:
 Power led is blinking when system is in suspend
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/monitor/dvi	
_purpose:
 Check output to display through dvi port
_steps:
 1. Connect display to dvi port
 2. Check the display
_verification:
 Output to display works
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/monitor/dvi-to-vga	
_purpose:
 Check output to display through vga adaptor on dvi port
_steps:
 1. Connect display to vga adaptor on dvi port
 2. Check the display
_verification:
 Output to display works
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/serial/console	
_purpose:
 Check user can log into system through serial port from another machine
_steps:
 1. Connect USB to db9 null modem adapter cable to serial port of test machine
 2. Connect the cable to USB port of another ubuntu machine (client)
 3. Install screen on client (if not done in Prerequisite tab)
 4. Execute following command on client:
  sudo screen /dev/ttyUSB0
 5. Boot or reboot the test machine
 6. Log into the test machine from terminal on client
_verification:
 1. Output to client is fine
 2. Log into test machine from terminal on client successfully
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/usb/hid	
_purpose:
 Check USB input device works
_steps:
 1. Connect USB keyboard
 2. Input somethings with USB keyboard
_verification:
 What just input is displayed correctly
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/usb/insert	
_purpose:
 Check system can detect USB storage when inserted
_steps:
 1. Connect USB storage device
 2. Check dmesg
_verification:
 Can find new USB storage device messages in dmesg
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/usb/storage-manual	
_purpose:
 Check system can read/write to USB storage correctly
_steps:
 1. Mount USB storage with read/write access
 2. Copy a test file to USB storage
 3. diff [copied file] [original file]
_verification:
 Two files are exactly the same, diff returns nothing
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/usb/remove	
_purpose:
 Check system can detect revmoal of a USB storage device
_steps:
 1. Disconnect a USB storage device
 2. Check dmesg
_verification:
 Can find USB storage device removed messages in dmesg
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/usb3/insert	
_purpose:
 Check system can detect insertion of a USB3 storage device
_steps:
 1. Connect a USB3 storage device
 2. Check dmesg
_verification:
 Can find new USB3 storage device messages in dmesg
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/usb3/storage-manual	
_purpose:
 Check system can read/write to USB3 storage devices correctly
_steps:
 1. Mount USB3 storage with read/write access
 2. Copy a test file to USB3 storage
 3. diff [copied file] [original file]
_verification:
 Two files are exactly the same, diff returns nothing
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/usb3/remove
_purpose:
 Check system can detect USB3 storage remove
_steps:
 1. Disconnect USB3 storage device
 2. Check dmesg
_verification:
 Can find USB3 storage device removed messages in dmesg
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/power-management/poweroff
_purpose:
 Check system can poweroff successfully
_steps:
 1. Execute following command:
  sudo poweroff
_verification:
 System poweroff successfully
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/power-management/reboot
_purpose:
 Check system can reboot
_steps:
 1. Execute following command:
  sudo reboot
_verification:
     System reboot into system successfully
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/wireless/wireless_scanning
_summary: Scan for wireless APs.
command:
 echo "run wpa_supplicant"
 wpa_supplicant -i wlan0 -C /tmp/wlan0 -B
 echo "run wpa_cli"
 wpa_cli -i wlan0 -p /tmp/wlan0 scan
 sleep 3
 echo "run wpa_cli scan_results"
 wpa_cli -i wlan0 -p /tmp/wlan0 scan_results
 RESULTLEN=$(wpa_cli -i wlan0 -p /tmp/wlan0 scan_results | wc -l)
 AP_COUNT=$((RESULTLEN - 1))
 echo "AP Count: $AP_COUNT"
 echo "terminate wpa_supplicant"
 wpa_cli -i wlan0 -p /tmp/wlan0 terminate
 if [ $AP_COUNT -gt 0 ]; then
   echo "Wireless networks discovered: "
   echo $AP_COUNT
   exit 0
 fi
 echo "No wireless networks discovered."
 exit 1
user: root
plugin: shell
category_id: snappy
estimated_duration: 6
_description:
 Wireless scanning test. It scans and reports on discovered APs.

id: snappy/wireless/wireless_connection_open_ac	
_purpose:
 Check system can connect to insecure 802.11ac AP
_steps:
 1. sudo dhclient -r wlan0
 2. sudo wpa_supplicant -i wlan 0 -c open_ac.conf &
 3. sudo dhclient wlan0
 4. ifconfig wlan0
 5. sudo wpa_cli terminate
_verification:
 In step 4, ip address is showed for interface wlan0
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/wireless/wireless_connection_open_bg
_purpose:
 Check system can connect to insecure 802.11b/g AP
_steps:
 1. sudo dhclient -r wlan0
 2. sudo wpa_supplicant -i wlan 0 -c open_bg.conf &
 3. sudo dhclient wlan0
 4. ifconfig wlan0
 5. sudo wpa_cli terminate
_verification:
 In step 4, ip address is showed for interface wlan0
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/wireless/wireless_connection_open_n
_purpose:
 Check system can connect to insecure 802.11n AP
_steps:
 1. sudo dhclient -r wlan0
 2. sudo wpa_supplicant -i wlan 0 -c open_n.conf &
 3. sudo dhclient wlan0
 4. ifconfig wlan0
 5. sudo wpa_cli terminate
_verification:
 In step 4, ip address is showed for interface wlan0
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/wireless/wireless_connection_wpa_ac
_purpose:
 Check system can connect to 802.11ac AP with wpa security
_steps:
 1. sudo dhclient -r wlan0
 2. sudo wpa_supplicant -i wlan 0 -c wpa_ac.conf &
 3. sudo dhclient wlan0
 4. ifconfig wlan0
 5. sudo wpa_cli terminate
_verification:
 In step 4, ip address is showed for interface wlan0
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/wireless/wireless_connection_wpa_bg	
_purpose:
 Check system can connect to 802.11b/g AP with wpa security
_steps:
 1. sudo dhclient -r wlan0
 2. sudo wpa_supplicant -i wlan 0 -c wpa_bg.conf &
 3. sudo dhclient wlan0
 4. ifconfig wlan0
 5. sudo wpa_cli terminate
_verification:
 In step 4, ip address is showed for interface wlan0
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/wireless/wireless_connection_wpa_n	
_purpose:
 Check system can connect to 802.11n AP with wpa security
_steps:
 1. sudo dhclient -r wlan0
 2. sudo wpa_supplicant -i wlan 0 -c wpa_n.conf &
 3. sudo dhclient wlan0
 4. ifconfig wlan0
 5. sudo wpa_cli terminate
_verification:
 In step 4, ip address is showed for interface wlan0
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/suspend/suspend-manual	
_purpose:
 Check the system can suspend successfully
_steps:
 1. Execute the following command:
  sudo systemctl suspend
_verification:
 System suspends successfully
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/suspend/audio-after-suspend/headphone
_purpose:
 Check that headphones work after suspend
_steps:
 1. Plug in headset to headset port
 2. Execute the following command:
  alsamixer
 3. Use arrow key to adjust volume, m key to mute/unmute
 4. Make sure all channels are not muted and have an appropriate volume
 5. Press q to exit alsamixer
 6. Suspend the device
 7. Resume the device
 6. Execute following command:
  arecord | aplay
 7. Speak in to microphone on headset
_verification:
 Verify that your voice is reproduced through the headphones clearly
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/suspend/audio-after-suspend/microphone
_purpose:
 Check that an external microphone works after suspend
_steps:
 1. Plug headset to headset port
 2. Execute following command:
  alsamixer
 3. Use arrow key to adjust volume, m key to mute/unmute
 4. Make sure all channels are not muted and have an appropriate volume
 5. Press q to exit alsamixer
 6. Suspend the device
 7. Resume the device
 8. Execute following command:
  arecord | aplay
 9. Speak in to microphone on headset
_verification:
 Verify that your voice is reproduced through the headphones clearly
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/suspend/bluetooth-after-suspend/hid	
_purpose:
 Check a bluetooth input device works after suspend
 Since there's only CLI with ubuntu-core, test keyboard only
_steps:
 1. Scan nearby devices:
     hcitool scan
 2. Pair a bluetooth input device
     bluez-simple-agent hci0 [MAC address of bluetooth input device]
 3. Set paired input device workable
     sudo bluez-test-input connect [MAC address of bluetooth input device]
 4. Suspend the device
 5. Resume the device
_verification:
 Can input from input device
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/suspend/ethernet-after-suspend/ping	
_purpose:
 Check ethernet works after suspend by pinging another machine
_steps:
 1. Make sure ethernet cable is connected and can access internet
 2. Suspend the device
 3. Resume the device
 4. ping google.com
_verification:
 Can successfully get ping responses from google.com
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/suspend/led-after-suspend/power	
_purpose:
 Check power led is on when system is powered on after suspend
_steps:
 1. Suspend the device
 2. Resume the device
 3. Check power led when system is powered on
_verification:
 Power led is on when system is powered on
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/suspend/monitor-after-suspend/dvi	
_purpose:
 Check output to display through dvi port after suspend
_steps:
 1. Connect display to dvi port
 2. Check the display
 3. Suspend the device
 4. Resume the device
_verification:
 Output to display works
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/suspend/monitor-after-suspend/dvi-to-vga	
_purpose:
 Check output to display through vga adaptor on dvi port after suspend
_steps:
 1. Connect display to vga adaptor on dvi port
 2. Check the display
 3. Suspend the device
 4. Resume the device
_verification:
 Output to display works
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/suspend/serial-after-suspend/console	
_purpose:
 Check user can still access the test machine through serial port from another machine
_steps:
 1. Follow the steps in case plano/serial/console to login from another machine (client)
 2. Execute following command in screen on client:
     sudo systemctl suspend
 3. Resume the test machine
 4. Try to run some commands in terminal on client
_verification:
 Can still run commands in terminal on client after suspend
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/suspend/usb-after-suspend/hid
_purpose:
 Check USB input device works after suspend
_steps:
 1. Connect USB keyboard
 2. Input some characters with the USB keyboard
 3. Suspend the device
 4. Wake the device
 5. Input some characters with the USB keyboard
_verification:
 Confirm the characters are displayed correctly
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/suspend/usb-after-suspend/insert	
_purpose:
 Check system can detect USB storage when inserted after suspend
_steps:
 1. Suspend the device
 2. Resume the device
 3. Connect USB storage device
 4. Check dmesg
_verification:
 Can find new USB storage device messages in dmesg
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/suspend/usb-after-suspend/storage-manual	
_purpose:
 Check system can read/write to USB storage correctly after suspend
_steps:
 1. Mount USB storage with read/write access
 2. Suspend the device
 3. Resume the device
 4. Copy a test file to USB storage
 5. diff [copied file] [original file]
_verification:
 Two files are exactly the same, diff returns nothing
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/suspend/usb-after-suspend/remove	
_purpose:
 Check system can detect revmoal of a USB storage device after suspend
_steps:
 1. Connect a USB storage device
 2. Suspend the device
 3. Resume the device
 4. Disconnect a USB storage device
 5. Check dmesg
_verification:
 Can find USB storage device removed messages in dmesg
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/suspend/usb3-after-suspend/insert	
_purpose:
 Check system can detect insertion of a USB3 storage device after suspend
_steps:
 1. Suspend the device
 2. Resume the device
 3. Connect a USB3 storage device
 4. Check dmesg
_verification:
 Can find new USB3 storage device messages in dmesg
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/suspend/usb3-after-suspend/storage-manual	
_purpose:
 Check system can read/write to USB3 storage devices correctly after suspend
_steps:
 1. Mount USB3 storage with read/write access
 2. Suspend the device
 3. Resume the device
 2. Copy a test file to USB3 storage
 3. diff [copied file] [original file]
_verification:
 Two files are exactly the same, diff returns nothing
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/suspend/usb3-after-suspend/remove	
_purpose:
 Check system can detect USB3 storage removal after suspend
_steps:
 1. Suspend the device
 2. Resume the device
 1. Disconnect USB3 storage device
 2. Check dmesg
_verification:
 Can find USB3 storage device removed messages in dmesg
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/suspend/wireless-after-suspend/wireless_scanning
_purpose:
 Check system can find a wireless network AP nearby after suspend
_steps:
 1. sudo wpa_supplicant -i wlan 0 -c scan.conf &
 2. Suspend the device
 3. Resume the device
 4. sudo wpa_cli scan
 5. sudo wpa_cli scan_results
 6. sudo wpa_cli terminate
_verification:
 In step 5, can see nearby wireless network AP
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/suspend/wireless-after-suspend/wireless_connection_open_ac
_purpose:
 Check system can connect to insecure 802.11ac AP after suspend
_steps:
 1. Suspend the device
 2. Resume the device
 3. sudo dhclient -r wlan0
 4. sudo wpa_supplicant -i wlan 0 -c open_ac.conf &
 5. sudo dhclient wlan0
 6. ifconfig wlan0
 7. sudo wpa_cli terminate
_verification:
 In step 6, ip address is showed for interface wlan0
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/suspend/wireless-after-suspend/wireless_connection_open_bg
_purpose:
 Check system can connect to insecure 802.11b/g AP after suspend
_steps:
 1. Suspend the device
 2. Resume the device
 3. sudo dhclient -r wlan0
 4. sudo wpa_supplicant -i wlan 0 -c open_bg.conf &
 5. sudo dhclient wlan0
 6. ifconfig wlan0
 7. sudo wpa_cli terminate
_verification:
 In step 6, ip address is showed for interface wlan0
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/suspend/wireless-after-suspend/wireless_connection_open_n	
_purpose:
 Check system can connect to insecure 802.11n AP after suspend
_steps:
 1. Suspend the device
 2. Resume the device
 3. sudo dhclient -r wlan0
 4. sudo wpa_supplicant -i wlan 0 -c open_n.conf &
 5. sudo dhclient wlan0
 6. ifconfig wlan0
 7. sudo wpa_cli terminate
_verification:
 In step 6, ip address is showed for interface wlan0
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/suspend/wireless-after-suspend/wireless_connection_wpa_ac	
_purpose:
 Check system can connect to 802.11ac AP with wpa security after suspend
_steps:
 1. Suspend the device
 2. Resume the device
 3. sudo dhclient -r wlan0
 4. sudo wpa_supplicant -i wlan 0 -c wpa_ac.conf &
 5. sudo dhclient wlan0
 6. ifconfig wlan0
 7. sudo wpa_cli terminate
_verification:
 In step 6, ip address is showed for interface wlan0
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/suspend/wireless-after-suspend/wireless_connection_wpa_bg	
_purpose:
 Check system can connect to 802.11b/g AP with wpa security after suspend
_steps:
 1. Suspend the device
 2. Resume the device
 3. sudo dhclient -r wlan0
 4. sudo wpa_supplicant -i wlan 0 -c wpa_bg.conf &
 5. sudo dhclient wlan0
 6. ifconfig wlan0
 7. sudo wpa_cli terminate
_verification:
 In step 6, ip address is showed for interface wlan0
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/suspend/wireless-after-suspend/wireless_connection_wpa_n	
_purpose:
 Check system can connect to 802.11n AP with wpa security after suspend
_steps:
 1. Suspend the device
 2. Resume the device
 3. sudo dhclient -r wlan0
 4. sudo wpa_supplicant -i wlan 0 -c wpa_n.conf &
 5. sudo dhclient wlan0
 6. ifconfig wlan0
 7. sudo wpa_cli terminate
_verification:
 In step 6, ip address is showed for interface wlan0
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/stress/suspend-30-times
_purpose:
 Check system can suspend 30 times successfully
_steps:
 1. Execute following command:
     sudo systemctl suspend
 2. Resume the system
 3. Repeat steps 1~2 30 times.
_verification:
 System suspend and resume successfully each time
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/stress/reboot-30-times	
_purpose:
 Check system can reboot 30 times successfully
_steps:
 1. Log into system
 2. Execute following command:
     sudo reboot
 3. Repeat steps 1~2 30 times.
_verification:
 System reboot successfully each time
plugin: manual
category_id: snappy
estimated_duration: 10

id: snappy/stress/poweroff-30-times	
_purpose:
 Check system can poweroff 30 times successfully
_steps:
 1. Log into system
 2. Execute following command:
     sudo poweroff
 3. Boot the system
 4. Repeat steps 1~3 30 times.
_verification:
 System poweroff successfully each time
plugin: manual
category_id: snappy
estimated_duration: 10
