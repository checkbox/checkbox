plugin: shell
category_id: 2013.com.canonical.plainbox::wireless
id: wireless/wireless_scanning
requires:
  package.name == 'network-manager'
  device.category == 'WIRELESS'
command:
 rfkill unblock wlan wifi
 if rfkill list wlan wifi | grep -q 'Hard blocked: yes'; then
   echo "Hard block is applied to WiFi device. Please remove and retest."
   exit 1
 fi
 wireless_networks=`(nmcli -f SSID dev wifi list 2>/dev/null || nmcli -f SSID dev wifi)`
 if [ `echo "$wireless_networks" | wc -l` -gt 1 ]; then
   echo "Wireless networks discovered: "
   echo "$wireless_networks"
   exit 0
 fi
 echo "No wireless networks discovered."
 exit 1
estimated_duration: 0.645
_description: Wireless scanning test. It scans and reports on discovered APs.

plugin: shell
category_id: 2013.com.canonical.plainbox::wireless
id: wireless/info_automated
requires:
 package.name == 'network-manager'
 device.category == 'WIRELESS'
command: udev_resource | filter_templates -w "category=WIRELESS" | awk "/interface: / { print \$2 }" | xargs -n 1 network_info
estimated_duration: 1.2
_description:
 This is an automated test to gather some info on the current state of your wireless devices. If no devices are found, the test will exit with an error.

plugin: user-interact-verify
category_id: 2013.com.canonical.plainbox::wireless
id: wireless/wireless_connection
command: network_check
estimated_duration: 120.0
requires: device.category == 'WIRELESS'
_description:
 PURPOSE:
     This test will check your wireless connection.
 STEPS:
     1. Click on the Network icon in the panel.
     2. Select a network below the 'Wireless networks' section.
     3. Click "Test" to verify that it's possible to establish an HTTP connection.
 VERIFICATION:
     Did a notification show and was the connection correctly established?

plugin: shell
category_id: 2013.com.canonical.plainbox::wireless
id: wireless/wireless_connection_wpa_bg
requires:
 device.category == 'WIRELESS'
 environment.ROUTERS == 'multiple'
user: root
environ: WPA_BG_SSID WPA_BG_PSK
command:
    trap "nmcli con delete id $WPA_BG_SSID" EXIT
    if create_connection wifi $WPA_BG_SSID --security=wpa --key=$WPA_BG_PSK; then
        connect_wireless # lp:1471663
        INTERFACE=`nmcli dev status | awk '/802-11-wireless|wifi/ {print $1}'`
        iw dev $INTERFACE link
        gateway_ping_test --interface=$INTERFACE
        STATUS=$?
        # We reconnect the Ethernet connection if any (lp:1471663)
        WIRED=$(nmcli -f UUID,TYPE c | grep -oP ".*(?=\s+.*ethernet)")
        if [[ ! -z $WIRED ]]; then
            nmcli c up uuid $WIRED
        fi
        exit $STATUS
    else
        exit 1
    fi
estimated_duration: 30.0
_description:
 Tests that the systems wireless hardware can connect to a router using WPA
 security and the 802.11b/g protocols.

plugin: shell
category_id: 2013.com.canonical.plainbox::wireless
id: wireless/wireless_connection_open_bg
requires:
 device.category == 'WIRELESS'
 environment.ROUTERS == 'multiple'
user: root
environ: OPEN_BG_SSID
command:
    trap "nmcli con delete id $OPEN_BG_SSID" EXIT
    if create_connection wifi $OPEN_BG_SSID; then
        connect_wireless # lp:1471663
        INTERFACE=`nmcli dev status | awk '/802-11-wireless|wifi/ {print $1}'`
        iw dev $INTERFACE link
        gateway_ping_test --interface=$INTERFACE
        STATUS=$?
        # We reconnect the Ethernet connection if any (lp:1471663)
        WIRED=$(nmcli -f UUID,TYPE c | grep -oP ".*(?=\s+.*ethernet)")
        if [[ ! -z $WIRED ]]; then
            nmcli c up uuid $WIRED
        fi
        exit $STATUS
    else
        exit 1
    fi
estimated_duration: 30.0
_description:
 Tests that the systems wireless hardware can connect to a router using no
 security and the 802.11b/g protocols.

plugin: shell
category_id: 2013.com.canonical.plainbox::wireless
id: wireless/wireless_connection_wpa_n
requires:
 device.category == 'WIRELESS'
 environment.ROUTERS == 'multiple'
user: root
environ: WPA_N_SSID WPA_N_PSK
command:
    trap "nmcli con delete id $WPA_N_SSID" EXIT
    if create_connection wifi $WPA_N_SSID --security=wpa --key=$WPA_N_PSK; then
        connect_wireless # lp:1471663
        INTERFACE=`nmcli dev status | awk '/802-11-wireless|wifi/ {print $1}'`
        iw dev $INTERFACE link
        gateway_ping_test --interface=$INTERFACE
        STATUS=$?
        # We reconnect the Ethernet connection if any (lp:1471663)
        WIRED=$(nmcli -f UUID,TYPE c | grep -oP ".*(?=\s+.*ethernet)")
        if [[ ! -z $WIRED ]]; then
            nmcli c up uuid $WIRED
        fi
        exit $STATUS
    else
        exit 1
    fi
estimated_duration: 30.0
_description:
 Tests that the systems wireless hardware can connect to a router using WPA
 security and the 802.11n protocol.

plugin: shell
category_id: 2013.com.canonical.plainbox::wireless
id: wireless/wireless_connection_open_n
requires:
 device.category == 'WIRELESS'
 environment.ROUTERS == 'multiple'
user: root
environ: OPEN_N_SSID
command:
    trap "nmcli con delete id $OPEN_N_SSID" EXIT
    if create_connection wifi $OPEN_N_SSID; then
        connect_wireless # lp:1471663
        INTERFACE=`nmcli dev status | awk '/802-11-wireless|wifi/ {print $1}'`
        iw dev $INTERFACE link
        gateway_ping_test --interface=$INTERFACE
        STATUS=$?
        # We reconnect the Ethernet connection if any (lp:1471663)
        WIRED=$(nmcli -f UUID,TYPE c | grep -oP ".*(?=\s+.*ethernet)")
        if [[ ! -z $WIRED ]]; then
            nmcli c up uuid $WIRED
        fi
        exit $STATUS
    else
        exit 1
    fi
estimated_duration: 30.0
_description:
 Tests that the systems wireless hardware can connect to a router using no
 security and the 802.11n protocol.

plugin: shell
category_id: 2013.com.canonical.plainbox::wireless
id: wireless/wireless_connection_wpa_ac
requires:
 device.category == 'WIRELESS'
 environment.ROUTERS == 'multiple'
 IEEE_80211.ac == 'supported'
user: root
environ: WPA_AC_SSID WPA_AC_PSK
command:
    trap "nmcli con delete id $WPA_AC_SSID" EXIT
    if create_connection wifi $WPA_AC_SSID --security=wpa --key=$WPA_AC_PSK; then
        connect_wireless # lp:1471663
        INTERFACE=`nmcli dev status | awk '/802-11-wireless|wifi/ {print $1}'`
        iw dev $INTERFACE link
        gateway_ping_test --interface=$INTERFACE
        STATUS=$?
        # We reconnect the Ethernet connection if any (lp:1471663)
        WIRED=$(nmcli -f UUID,TYPE c | grep -oP ".*(?=\s+.*ethernet)")
        if [[ ! -z $WIRED ]]; then
            nmcli c up uuid $WIRED
        fi
        exit $STATUS
    else
        exit 1
    fi
estimated_duration: 30.0
_description:
 Tests that the systems wireless hardware can connect to a router using WPA
 security and the 802.11ac protocol.

plugin: shell
category_id: 2013.com.canonical.plainbox::wireless
id: wireless/wireless_connection_open_ac
requires:
 device.category == 'WIRELESS'
 environment.ROUTERS == 'multiple'
 IEEE_80211.ac == 'supported'
user: root
environ: OPEN_AC_SSID
command:
    trap "nmcli con delete id $OPEN_AC_SSID" EXIT
    if create_connection wifi $OPEN_AC_SSID; then
        connect_wireless # lp:1471663
        INTERFACE=`nmcli dev status | awk '/802-11-wireless|wifi/ {print $1}'`
        iw dev $INTERFACE link
        gateway_ping_test --interface=$INTERFACE
        STATUS=$?
        # We reconnect the Ethernet connection if any (lp:1471663)
        WIRED=$(nmcli -f UUID,TYPE c | grep -oP ".*(?=\s+.*ethernet)")
        if [[ ! -z $WIRED ]]; then
            nmcli c up uuid $WIRED
        fi
        exit $STATUS
    else
        exit 1
    fi
estimated_duration: 30.0
_description:
 Tests that the systems wireless hardware can connect to a router using no
 security and the 802.11ac protocol.

plugin: user-interact-verify
category_id: 2013.com.canonical.plainbox::wireless
id: wireless/wireless_connection_wpa_bg_manual
requires:
 device.category == 'WIRELESS'
 environment.ROUTERS == 'single'
user: root
environ: ROUTER_SSID ROUTER_PSK
command:
    trap "nmcli con delete id $ROUTER_SSID" EXIT
    if create_connection wifi $ROUTER_SSID --security=wpa --key=$ROUTER_PSK; then
        connect_wireless # lp:1471663
        INTERFACE=`nmcli dev status | awk '/802-11-wireless|wifi/ {print $1}'`
        iw dev $INTERFACE link
        gateway_ping_test --interface=$INTERFACE
        STATUS=$?
        # We reconnect the Ethernet connection if any (lp:1471663)
        WIRED=$(nmcli -f UUID,TYPE c | grep -oP ".*(?=\s+.*ethernet)")
        if [[ ! -z $WIRED ]]; then
            nmcli c up uuid $WIRED
        fi
        exit $STATUS
    else
        exit 1
    fi
estimated_duration: 120.0
_description:
 PURPOSE:
     Tests that the systems wireless hardware can connect to a router using WPA
     security and the 802.11b/g protocols.
 STEPS:
     1. Open your router's configuration tool
     2. Change the settings to only accept connections on the B and G wireless bands
     3. Make sure the SSID is set to the contents of the ROUTER_SSID environment variable
     4. Change the security settings to use WPA2 and ensure the PSK matches what is set in the ROUTER_PSK environment variable
     5. Commence the test to create a connection to the router and test the connection
 VERIFICATION:
     Verification is automated, do not change the automatically selected result.

plugin: user-interact-verify
category_id: 2013.com.canonical.plainbox::wireless
id: wireless/wireless_connection_open_bg_manual
requires:
 device.category == 'WIRELESS'
 environment.ROUTERS == 'single'
user: root
environ: ROUTER_SSID
command:
    trap "nmcli con delete id $ROUTER_SSID" EXIT
    if create_connection wifi $ROUTER_SSID; then
        connect_wireless # lp:1471663
        INTERFACE=`nmcli dev status | awk '/802-11-wireless|wifi/ {print $1}'`
        iw dev $INTERFACE link
        gateway_ping_test --interface=$INTERFACE
        STATUS=$?
        # We reconnect the Ethernet connection if any (lp:1471663)
        WIRED=$(nmcli -f UUID,TYPE c | grep -oP ".*(?=\s+.*ethernet)")
        if [[ ! -z $WIRED ]]; then
            nmcli c up uuid $WIRED
        fi
        exit $STATUS
    else
        exit 1
    fi
estimated_duration: 120.0
_description:
 PURPOSE:
     Tests that the systems wireless hardware can connect to a router using
     no security and the 802.11b/g protocols.
 STEPS:
     1. Open your router's configuration tool
     2. Change the settings to only accept connections on the B and G wireless bands
     3. Make sure the SSID is set to the contents of the ROUTER_SSID environment variable
     4. Change the security settings to use no security
     5. Commence the test to create a connection to the router and test the connection
 VERIFICATION:
     Verification is automated, do not change the automatically selected result.

plugin: user-interact-verify
category_id: 2013.com.canonical.plainbox::wireless
id: wireless/wireless_connection_wpa_n_manual
requires:
 device.category == 'WIRELESS'
 environment.ROUTERS == 'single'
 IEEE_80211.band_5GHz == 'supported'
user: root
environ: ROUTER_SSID ROUTER_PSK
command:
    trap "nmcli con delete id $ROUTER_SSID" EXIT
    if create_connection wifi $ROUTER_SSID --security=wpa --key=$ROUTER_PSK; then
        connect_wireless # lp:1471663
        INTERFACE=`nmcli dev status | awk '/802-11-wireless|wifi/ {print $1}'`
        iw dev $INTERFACE link
        gateway_ping_test --interface=$INTERFACE
        STATUS=$?
        # We reconnect the Ethernet connection if any (lp:1471663)
        WIRED=$(nmcli -f UUID,TYPE c | grep -oP ".*(?=\s+.*ethernet)")
        if [[ ! -z $WIRED ]]; then
            nmcli c up uuid $WIRED
        fi
        exit $STATUS
    else
        exit 1
    fi
estimated_duration: 120.0
_description:
 PURPOSE:
     Tests that the systems wireless hardware can connect to a router using WPA
     security and the 802.11n protocols.
 STEPS:
     1. Open your router's configuration tool
     2. Change the settings to only accept connections on the N wireless band
     3. Make sure the SSID is set to the contents of the ROUTER_SSID environment variable
     4. Change the security settings to use WPA2 and ensure the PSK matches what is set in the ROUTER_PSK environment variable
     5. Commence the test to create a connection to the router and test the connection
 VERIFICATION:
     Verification is automated, do not change the automatically selected result.

plugin: user-interact-verify
category_id: 2013.com.canonical.plainbox::wireless
id: wireless/wireless_connection_open_n_manual
requires:
 device.category == 'WIRELESS'
 environment.ROUTERS == 'single'
 IEEE_80211.band_5GHz == 'supported'
user: root
environ: ROUTER_SSID
command:
    trap "nmcli con delete id $ROUTER_SSID" EXIT
    if create_connection wifi $ROUTER_SSID; then
        connect_wireless # lp:1471663
        INTERFACE=`nmcli dev status | awk '/802-11-wireless|wifi/ {print $1}'`
        iw dev $INTERFACE link
        gateway_ping_test --interface=$INTERFACE
        STATUS=$?
        # We reconnect the Ethernet connection if any (lp:1471663)
        WIRED=$(nmcli -f UUID,TYPE c | grep -oP ".*(?=\s+.*ethernet)")
        if [[ ! -z $WIRED ]]; then
            nmcli c up uuid $WIRED
        fi
        exit $STATUS
    else
        exit 1
    fi
estimated_duration: 120.0
_description:
 PURPOSE:
     Tests that the systems wireless hardware can connect to a router using
     no security and the 802.11n protocol.
 STEPS:
     1. Open your router's configuration tool
     2. Change the settings to only accept connections on the N wireless band
     3. Make sure the SSID is set to the contents of the ROUTER_SSID environment variable
     4. Change the security settings to use no security
     5. Commence the test to create a connection to the router and test the connection
 VERIFICATION:
     Verification is automated, do not change the automatically selected result.

plugin: user-interact-verify
category_id: 2013.com.canonical.plainbox::wireless
id: wireless/wireless_connection_wpa_ac_manual
requires:
 device.category == 'WIRELESS'
 environment.ROUTERS == 'single'
 IEEE_80211.ac == 'supported'
user: root
environ: ROUTER_SSID ROUTER_PSK
command:
    trap "nmcli con delete id $ROUTER_SSID" EXIT
    if create_connection wifi $ROUTER_SSID --security=wpa --key=$ROUTER_PSK; then
        connect_wireless # lp:1471663
        INTERFACE=`nmcli dev status | awk '/802-11-wireless|wifi/ {print $1}'`
        iw dev $INTERFACE link
        gateway_ping_test --interface=$INTERFACE
        STATUS=$?
        # We reconnect the Ethernet connection if any (lp:1471663)
        WIRED=$(nmcli -f UUID,TYPE c | grep -oP ".*(?=\s+.*ethernet)")
        if [[ ! -z $WIRED ]]; then
            nmcli c up uuid $WIRED
        fi
        exit $STATUS
    else
        exit 1
    fi
estimated_duration: 120.0
_description:
 PURPOSE:
     Tests that the systems wireless hardware can connect to a router using WPA
     security and the 802.11ac protocol.
 STEPS:
     1. Open your router's configuration tool
     2. Change the settings to only accept connections with the 802.11ac protocol.
     3. Make sure the SSID is set to the contents of the ROUTER_SSID environment variable
     4. Change the security settings to use WPA2 and ensure the PSK matches what is set in the ROUTER_PSK environment variable
     5. Commence the test to create a connection to the router and test the connection
 VERIFICATION:
     Verification is automated, do not change the automatically selected result.

plugin: user-interact-verify
category_id: 2013.com.canonical.plainbox::wireless
id: wireless/wireless_connection_open_ac_manual
requires:
 device.category == 'WIRELESS'
 environment.ROUTERS == 'single'
 IEEE_80211.ac == 'supported'
user: root
environ: ROUTER_SSID
command:
    trap "nmcli con delete id $ROUTER_SSID" EXIT
    if create_connection wifi $ROUTER_SSID; then
        connect_wireless # lp:1471663
        INTERFACE=`nmcli dev status | awk '/802-11-wireless|wifi/ {print $1}'`
        iw dev $INTERFACE link
        gateway_ping_test --interface=$INTERFACE
        STATUS=$?
        # We reconnect the Ethernet connection if any (lp:1471663)
        WIRED=$(nmcli -f UUID,TYPE c | grep -oP ".*(?=\s+.*ethernet)")
        if [[ ! -z $WIRED ]]; then
            nmcli c up uuid $WIRED
        fi
        exit $STATUS
    else
        exit 1
    fi
estimated_duration: 120.0
_description:
 PURPOSE:
     Tests that the systems wireless hardware can connect to a router using
     no security and the 802.11ac protocol.
 STEPS:
     1. Open your router's configuration tool
     2. Change the settings to only accept connections with the 802.11ac protocol.
     3. Make sure the SSID is set to the contents of the ROUTER_SSID environment variable
     4. Change the security settings to use no security
     5. Commence the test to create a connection to the router and test the connection
 VERIFICATION:
     Verification is automated, do not change the automatically selected result.

plugin: shell
category_id: 2013.com.canonical.plainbox::wireless
id: wireless/monitor_wireless_connection
requires:
 package.name == 'iperf'
 device.category == 'WIRELESS'
user: root
environ: WPA_BG_SSID WPA_BG_PSK SERVER_IPERF
command:
    trap "nmcli con delete id $WPA_BG_SSID" EXIT
    if create_connection wifi $WPA_BG_SSID --security=wpa --key=$WPA_BG_PSK; then
        connect_wireless # lp:1471663
        INTERFACE=`nmcli dev status | awk '/802-11-wireless|wifi/ {print $1}'`
        iw dev $INTERFACE link
        iperf -c $SERVER_IPERF -t 300 -i 30
        STATUS=$?
        # We reconnect the Ethernet connection if any (lp:1471663)
        WIRED=$(nmcli -f UUID,TYPE c | grep -oP ".*(?=\s+.*ethernet)")
        if [[ ! -z $WIRED ]]; then
            nmcli c up uuid $WIRED
        fi
        exit $STATUS
    else
        exit 1
    fi
estimated_duration: 330.0
_description:
 Tests the performance of a system's wireless connection through the iperf tool.

plugin: shell
category_id: 2013.com.canonical.plainbox::wireless
id: wireless/monitor_wireless_connection_udp
requires:
 package.name == 'iperf'
 device.category == 'WIRELESS'
user: root
environ: WPA_BG_SSID WPA_BG_PSK SERVER_IPERF
command:
    trap "nmcli con delete id $WPA_BG_SSID" EXIT
    if create_connection wifi $WPA_BG_SSID --security=wpa --key=$WPA_BG_PSK; then
        connect_wireless # lp:1471663
        INTERFACE=`nmcli dev status | awk '/802-11-wireless|wifi/ {print $1}'`
        iw dev $INTERFACE link
        iperf -c $SERVER_IPERF -t 300 -i 30 -u -b 100m -p 5050
        STATUS=$?
        # We reconnect the Ethernet connection if any (lp:1471663)
        WIRED=$(nmcli -f UUID,TYPE c | grep -oP ".*(?=\s+.*ethernet)")
        if [[ ! -z $WIRED ]]; then
            nmcli c up uuid $WIRED
        fi
        exit $STATUS
    else
        exit 1
    fi
estimated_duration: 330.0
_description:
 Tests the performance of a system's wireless connection through the iperf tool, using UDP packets.

plugin: shell
category_id: 2013.com.canonical.plainbox::wireless
id: wireless/wireless_connection_open_a
requires:
 device.category == 'WIRELESS'
 IEEE_80211.band_5GHz == 'supported'
user: root
environ: OPEN_A_SSID
command:
    trap "nmcli con delete id $OPEN_A_SSID" EXIT
    if create_connection wifi $OPEN_A_SSID; then
        connect_wireless # lp:1471663
        INTERFACE=`nmcli dev status | awk '/802-11-wireless|wifi/ {print $1}'`
        iw dev $INTERFACE link
        gateway_ping_test --interface=$INTERFACE
        STATUS=$?
        # We reconnect the Ethernet connection if any (lp:1471663)
        WIRED=$(nmcli -f UUID,TYPE c | grep -oP ".*(?=\s+.*ethernet)")
        if [[ ! -z $WIRED ]]; then
            nmcli c up uuid $WIRED
        fi
        exit $STATUS
    else
        exit 1
    fi
estimated_duration: 30.0
_description:
  Test that the system's wireless hardware can connect to a router using the
  802.11a protocol. This requires that you have a router pre-configured to only
  respond to requests on the 802.11a protocol.

plugin: shell
category_id: 2013.com.canonical.plainbox::wireless
id: wireless/wireless_connection_open_b
requires:
 device.category == 'WIRELESS'
user: root
environ: OPEN_B_SSID
command:
    trap "nmcli con delete id $OPEN_B_SSID" EXIT
    if create_connection wifi $OPEN_B_SSID; then
        connect_wireless # lp:1471663
        INTERFACE=`nmcli dev status | awk '/802-11-wireless|wifi/ {print $1}'`
        iw dev $INTERFACE link
        gateway_ping_test --interface=$INTERFACE
        STATUS=$?
        # We reconnect the Ethernet connection if any (lp:1471663)
        WIRED=$(nmcli -f UUID,TYPE c | grep -oP ".*(?=\s+.*ethernet)")
        if [[ ! -z $WIRED ]]; then
            nmcli c up uuid $WIRED
        fi
        exit $STATUS
    else
        exit 1
    fi
estimated_duration: 30.0
_description:
  Test that the system's wireless hardware can connect to a router using the
  802.11b protocol. This requires that you have a router pre-configured to only
  respond to requests on the 802.11b protocol.

unit: template
template-unit: job
template-resource: device
template-filter:
 device.category == 'WIRELESS'
plugin: shell
category_id: 2013.com.canonical.plainbox::wireless
id: wireless/stress_performance_device{__index__}_{interface}
estimated_duration: 330.0
requires:
 device.path == '{path}'
 package.name == 'iperf'
environ: TEST_TARGET_IPERF
user: root
command: network test -i {interface} -t stress
_description:
 This test executes iperf to generate a load on the network device {__index__} ({interface}) and then performs a ping test to watch for dropped packets and very large latency periods.

plugin: shell
category_id: 2013.com.canonical.plainbox::wireless
id: wireless/wireless_connection_open_g
requires:
 device.category == 'WIRELESS'
user: root
environ: OPEN_G_SSID
command:
    trap "nmcli con delete id $OPEN_G_SSID" EXIT
    if create_connection wifi $OPEN_G_SSID; then
        connect_wireless # lp:1471663
        INTERFACE=`nmcli dev status | awk '/802-11-wireless|wifi/ {print $1}'`
        iw dev $INTERFACE link
        gateway_ping_test --interface=$INTERFACE
        STATUS=$?
        # We reconnect the Ethernet connection if any (lp:1471663)
        WIRED=$(nmcli -f UUID,TYPE c | grep -oP ".*(?=\s+.*ethernet)")
        if [[ ! -z $WIRED ]]; then
            nmcli c up uuid $WIRED
        fi
        exit $STATUS
    else
        exit 1
    fi
estimated_duration: 30.0
_description:
  Test that the system's wireless hardware can connect to a router using the
  802.11g protocol. This requires that you have a router pre-configured to only
  respond to requests on the 802.11g protocol.

plugin: shell
category_id: 2013.com.canonical.plainbox::wireless
id: wireless/wireless_extension
requires: device.category == 'WIRELESS'
command: wireless_ext
estimated_duration: 1.2
_description:
 Test that the MAC80211 modules are loaded and wireless extensions are working.

unit: template
template-unit: job
template-resource: device
template-filter: device.category == 'WIRELESS'
plugin: shell
category_id: 2013.com.canonical.plainbox::wireless
id: wireless/iwconfig_check_device{__index__}_{interface}
estimated_duration: 1.2
requires: device.path == '{path}'
command: iwconfig {interface}
_description:
 This test executes iwconfig requests against wireless device {__index__} ({interface}).

plugin: user-interact-verify
category_id: 2013.com.canonical.plainbox::wireless
id: wireless/wireless_rfkill
command: rfkill list | zenity --text-info --title rfkill-Info
estimated_duration: 120.0
requires: device.category == 'WIRELESS'
_description:
 PURPOSE:
     This test will check whether or not your driver responds to rfkill commands.
 STEPS:
     1. Use the hardware switch on the side of your device to switch off wireless.
     2. If you do not have a hardware switch disable wireless from the network manager icon in the panel
     3. Click "Test" to verify that the hard or soft blocks are in place.
 VERIFICATION:
     Did the hard or soft blocks show on in the dialog?

unit: template
template-unit: job
template-resource: device
template-filter: device.category == 'WIRELESS'
plugin: user-interact-verify
category_id: 2013.com.canonical.plainbox::wireless
id: wireless/maximum_bandwidth_device{__index__}_{interface}
estimated_duration: 120.0
requires:
 device.path == '{path}'
 package.name == 'zenity'
 package.name == 'iperf'
environ: TEST_TARGET_IPERF
user: root
command: network test -i {interface} -t iperf 2>&1 | cat - <(echo; echo "Verify the result and click OK to decide on the outcome") | zenity --text-info --title 'mobile broadband max bw {interface}'
_purpose:
 User verification of whether the observed transfer throughput is acceptable
 for the type and maximum speed of wireless device {__index__} ({interface}).
_steps:
 1. Click "Test".
 2. Read the network test summary and confirm that the throughput is acceptable.
 3. If needed, click "Test" again to repeat the transfer test.
_verification:
 Was the reported throughput acceptable for the type and maximum speed of this interface?
